# –î–ª—è Google Colab —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É: !pip install pyTelegramBotAPI

from telebot import TeleBot, types
import json
import time

bot = TeleBot('7395468145:AAH_APOj3dMtZVMXcXHLmkiFsNLuy_OZk6U', parse_mode='HTML')  # –≤—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω –∏–∑ —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–∞ @BotFather


# /start 
@bot.message_handler(commands=['start'])
def start_command_handler(message: types.Message):
    # —Å–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_example = types.KeyboardButton('–ü—Ä–∏–º–µ—Ä')
    btn_help = types.KeyboardButton('–ü–æ–º–æ—â—å')
    btn_clear = types.KeyboardButton('–û—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω')
    markup.add(btn_example, btn_help, btn_clear)

    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! üëã –Ø PrettyJsonBot.\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ JSON, –∏ —è —Å–¥–µ–ª–∞—é –µ–≥–æ –∫—Ä–∞—Å–∏–≤—ã–º.\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏ ¬´–ü—Ä–∏–º–µ—Ä¬ª, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø—Ä–∏–º–µ—Ä JSON.",
        reply_markup=markup
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(content_types=['text'])
def handle_text(message: types.Message):
    if message.text == '–ü—Ä–∏–º–µ—Ä':
        example_json = '{"name":"PrettyJsonBot","version":1.0,"features":["validation","formatting","fun"],"author":"Mur Mur"}'
        bot.send_message(message.chat.id, example_json)
        return

    elif message.text == '–ü–æ–º–æ—â—å':
        bot.send_message(
            message.chat.id,
            "üìò –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –º–Ω–µ JSON –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞, "
            "–∞ —è –ø—Ä–æ–≤–µ—Ä—é –µ–≥–æ –∏ –≤–µ—Ä–Ω—É –∫—Ä–∞—Å–∏–≤–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é!"
        )
        return

    elif message.text == '–û—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω':
        clear_screen(message)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ JSON 
    try:
        payload = json.loads(message.text)
    except json.JSONDecodeError as ex:
        bot.send_message(
            message.chat.id,
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ JSON:\n<code>{str(ex)}</code>"
        )
        return

    text = json.dumps(payload, indent=2, sort_keys=True, ensure_ascii=False)

    # –ï—Å–ª–∏ JSON –¥–ª–∏–Ω–Ω—ã–π –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –∫–∞–∫ —Ñ–∞–π–ª
    if len(text) > 4000:
        with open('pretty_json.txt', 'w', encoding='utf-8') as f:
            f.write(text)
        with open('pretty_json.txt', 'rb') as f:
            bot.send_document(message.chat.id, f, caption="üìÑ –í–æ—Ç —Ç–≤–æ–π –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JSON")
    else:
        bot.send_message(message.chat.id, f"‚ú®–ö—Ä–∞—Å–æ—Ç–∞! –í–æ—Ç —Ç–≤–æ–π JSON‚úÖ :\n<code>{text}</code>")


# –û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞
def clear_screen(message: types.Message):
    bot.send_message(message.chat.id, "üßπ –û—á–∏—â–∞—é —ç–∫—Ä–∞–Ω...")
    time.sleep(0.5)

    # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π
    for i in range(20):
        try:
            bot.delete_message(message.chat.id, message.message_id - i)
        except:
            pass

    bot.send_message(message.chat.id, "‚úÖ –≠–∫—Ä–∞–Ω –æ—á–∏—â–µ–Ω!\n–ú–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ üòâ")


# –ó–∞–ø—É—Å–∫ —Å–∞–º–æ–≥–æ –±–æ—Ç–∞
if __name__ == '__main__':
    print("ü§ñ PrettyJsonBot –∑–∞–ø—É—â–µ–Ω!")
    bot.infinity_polling()
